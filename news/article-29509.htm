<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://hysteriawindows.github.io/news/article-29509.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>ElasticSearch学习：springboot集成ElasticSearch</title>
        <meta name="description" content="跟其他的菲关系类型数据库一样集成springboot，在生成代码时，勾选web和非关系数据库里面的ElasticSearch就可以。 demo的git地址我放在下面：git es demo 代码 这里" />
        <link rel="icon" href="/assets/website/img/hysteriawindows/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/assets/website/css/hysteriawindows/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/hysteriawindows/themify-icons.css">
    <link rel="stylesheet" href="__ADDON__/js/frontend/hysteriawindows/fontawesome/css/all.min.css">
    <link rel="stylesheet" href="__ADDON__/js/frontend/hysteriawindows/owl-carousel/owl.carousel.min.css">
    <link rel="stylesheet" href="__ADDON__/js/frontend/hysteriawindows/animate-css/animate.css">
    <!-- main css -->
    <link rel="stylesheet" href="/assets/website/css/hysteriawindows/style.css">
    <link rel="stylesheet" href="/assets/website/css/hysteriawindows/responsive.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-W3GH5FWSVJ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-W3GH5FWSVJ');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--================Header Menu Area =================-->
    <header class="header_area">
        <div class="main_menu">
            <nav class="navbar navbar-expand-lg navbar-light">
                <div class="container">
                    <!-- Brand and toggle get grouped for better mobile display -->
                                        <a class="navbar-brand logo_h" href="/">
                        <span>Hysteria Windows</span>
                    </a>
                                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <!-- Collect the nav links, forms, and other content for toggling -->
                    <div class="collapse navbar-collapse offset" id="navbarSupportedContent">
                        <ul class="nav navbar-nav menu_nav ml-auto">
                                                        <li class="nav-item"><a class="nav-link" href="/">首页</a></li>
                                                        <li class="nav-item"><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                                        <li class="nav-item"><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                                        <li class="nav-item"><a class="nav-link" href="/news/">新闻资讯</a></li>
                                                        <li class="nav-item"><a class="nav-link" href="#">关于</a></li>
                            <li class="nav-item"><a class="nav-link" href="#">联系</a></li>
                        </ul>
                    </div>
                </div>
            </nav>
        </div>
    </header>
    <!--================Header Menu Area =================-->
    <!--================Hero Banner Area Start =================-->
    <section class="hero-banner d-flex align-items-center">
        <div class="container text-center">
            <h1>ElasticSearch学习：springboot集成ElasticSearch</h1>
            <nav aria-label="breadcrumb" class="banner-breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">首页</a></li>
                    <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                    <li class="breadcrumb-item active" aria-current="page">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <!--================Hero Banner Area End =================-->
    <!--================About  Area =================-->
    <section class="statics-area area-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>跟其他的菲关系类型数据库一样集成springboot，在生成代码时，勾选web和非关系数据库里面的ElasticSearch就可以。</p> <p>demo的git地址我放在下面：<br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/stubborn123/codeDemo/tree/main/esdemo"  rel="nofollow">git es demo 代码</a></p> <p>这里我主要提两个部分<br /> (一)Java端返回结果警告<br /> 一般来说是虑ES security的设置，实际上7.13就开始了加强这个。ES 8直接默认让你去设置security。</p> <p>我这边用的是7.17版本，设置的是在有yml上：</p> <pre><code>xpack.security.enabled: false</code></pre> <p>（二）关于配置类和测试方法类<br /> 配置类</p> <pre><code>package com.es.example.demo.config;   import org.apache.http.HttpHost; import org.elasticsearch.client.RestClient; import org.elasticsearch.client.RestHighLevelClient; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration;  /**  * @Author: zhangpeng  * @Date: 2022/2/16 10:56  */ @Configuration public class ElasticSearchClientConfig {      @Bean     public RestHighLevelClient restHighLevelClient() {         RestHighLevelClient client = new RestHighLevelClient(                 RestClient.builder(                         new HttpHost("127.0.0.1", 9200, "http")                 )         );          return client;     }   }</code></pre> <p>测试方法类，主要是多种方法</p> <pre><code>package com.es.example.demo;  import com.alibaba.fastjson.JSON; import com.es.example.demo.DO.User; import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest; import org.elasticsearch.action.bulk.BulkRequest; import org.elasticsearch.action.bulk.BulkResponse; import org.elasticsearch.action.delete.DeleteRequest; import org.elasticsearch.action.delete.DeleteResponse; import org.elasticsearch.action.get.GetRequest; import org.elasticsearch.action.get.GetResponse; import org.elasticsearch.action.index.IndexRequest; import org.elasticsearch.action.index.IndexResponse; import org.elasticsearch.action.search.SearchRequest; import org.elasticsearch.action.search.SearchResponse; import org.elasticsearch.action.support.master.AcknowledgedResponse; import org.elasticsearch.action.update.UpdateRequest; import org.elasticsearch.action.update.UpdateResponse; import org.elasticsearch.client.RequestOptions; import org.elasticsearch.client.RestHighLevelClient; import org.elasticsearch.client.indices.CreateIndexRequest; import org.elasticsearch.client.indices.CreateIndexResponse; import org.elasticsearch.client.indices.GetIndexRequest; import org.elasticsearch.common.unit.TimeValue; import org.elasticsearch.common.xcontent.XContentType; import org.elasticsearch.index.query.QueryBuilders; import org.elasticsearch.index.query.TermQueryBuilder; import org.elasticsearch.search.SearchHit; import org.elasticsearch.search.builder.SearchSourceBuilder; import org.elasticsearch.search.fetch.subphase.FetchSourceContext; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.boot.test.context.SpringBootTest;  import java.io.IOException; import java.util.ArrayList; import java.util.concurrent.TimeUnit;  @SpringBootTest class EsdemoApplicationTests {      @Test     void contextLoads() {     }        public static final String INDEX = "zp_test_index";      @Autowired     //这个读取@bean要不用人家的原名或者在配置类搞个别名，要不在使用的地方指定好     @Qualifier(value = "restHighLevelClient")     private RestHighLevelClient client;      // 创建索引     @Test     void testCreateIndex() throws IOException {         // 1. 创建索引请求         CreateIndexRequest request = new CreateIndexRequest(INDEX);         // 2. 客户端执行请求， IndicesClient，请求后获得响应         CreateIndexResponse createIndexResponse = client.indices().create(request, RequestOptions.DEFAULT);         System.out.println(createIndexResponse);     }      // 测试索引存在     @Test     void testExistsIndex() throws IOException {         GetIndexRequest request = new GetIndexRequest(INDEX);         boolean exists = client.indices().exists(request, RequestOptions.DEFAULT);         System.out.println(exists);     }      // 删除索引     @Test     void testDeleteIndex() throws IOException {         DeleteIndexRequest request = new DeleteIndexRequest(INDEX);         AcknowledgedResponse acknowledgedResponse = client.indices().delete(request, RequestOptions.DEFAULT);         System.out.println(acknowledgedResponse.isAcknowledged());     }      // 添加文档     @Test     void testAddDocument() throws IOException {         User user = new User("张三", 28);         IndexRequest request = new IndexRequest(INDEX);         // 规则 PUT /index/_doc/1         request.id("1");         request.timeout(TimeValue.timeValueSeconds(1));         // 将数据放入请求 json         request.source(JSON.toJSONString(user), XContentType.JSON);         IndexResponse response = client.index(request, RequestOptions.DEFAULT);         System.out.println(response.toString());         System.out.println(response.status());     }      //注意这里要是发现获取返回结果提示警告，拿不到结果，要考虑ES security的设置      // 获取文档 判断是否存在 GET /index/_doc/1     @Test     void testIsExists() throws IOException {         GetRequest request = new GetRequest(INDEX, "1");         // 不获取返回的 _source 的上下文了         request.fetchSourceContext(new FetchSourceContext(false));         request.storedFields("_none_");          boolean exists = client.exists(request, RequestOptions.DEFAULT);         System.out.println(exists);     }      // 获取文档      /**      * 返回结果：      * {"age":28,"name":"狂神说"}      * {"_index":"xiaofan_test_index","_type":"_doc","_id":"1","_version":1,"_seq_no":0,"_primary_term":1,"found":true,"_source":{"age":28,"name":"狂神说"}}      */     @Test     void testGetDocument() throws IOException {         GetRequest request = new GetRequest(INDEX, "1");         GetResponse response = client.get(request, RequestOptions.DEFAULT);         System.out.println(response.getSourceAsString());         System.out.println(response);     }      // 更新文档     @Test     void testUpdateDocument() throws IOException {         UpdateRequest request = new UpdateRequest(INDEX, "1");         request.timeout("1s");          User user = new User("法外狂徒格雷福斯", 18);         request.doc(JSON.toJSONString(user), XContentType.JSON);          UpdateResponse updateResponse = client.update(request, RequestOptions.DEFAULT);         System.out.println(updateResponse);     }      // 删除文档     @Test     void testDeleteDocument() throws IOException {         DeleteRequest request = new DeleteRequest(INDEX, "1");         request.timeout("1s");          DeleteResponse deleteResponse = client.delete(request, RequestOptions.DEFAULT);         System.out.println(deleteResponse);      }      // 批量插入数据（修改，删除类似操作）     @Test     void testBulkRequest() throws IOException {         BulkRequest request = new BulkRequest();         request.timeout("10s");          ArrayList&lt;User&gt; users = new ArrayList&lt;&gt;();         users.add(new User("kuangshen1", 21));         users.add(new User("kuangshen2", 22));         users.add(new User("kuangshen3", 23));         users.add(new User("xiaofan1", 18));         users.add(new User("xiaofan2", 19));          // 批处理请求， 修改，删除，只要在这里修改相应的请求就可以         for (int i = 0; i &lt; users.size(); i++) {             request.add(new IndexRequest(INDEX)                     .id(String.valueOf(i + 1))                     .source(JSON.toJSONString(users.get(i)), XContentType.JSON));         }          BulkResponse bulkResponse = client.bulk(request, RequestOptions.DEFAULT);         //是否失败，返回false表示成功         System.out.println(bulkResponse.hasFailures());     }      // 查询文档     @Test     void testSearch() throws IOException {         SearchRequest searchRequest = new SearchRequest(INDEX);         // 构建搜索条件         SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();          // 查询条件， 可以使用QueryBuilders工具类实现         // QueryBuilders.termQuery 精确         // QueryBuilders.matchLLQuery() 匹配所有         TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery("name", "kuangshen1");         // MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();         sourceBuilder.query(termQueryBuilder);         sourceBuilder.timeout(new TimeValue(60, TimeUnit.SECONDS));          searchRequest.source(sourceBuilder);          SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);         System.out.println(JSON.toJSON(searchResponse.getHits()));         System.out.println("======================================");         for (SearchHit documentFields : searchResponse.getHits().getHits()) {             System.out.println(documentFields.getSourceAsMap());         }      }  }</code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-29508.htm">微信小程序navigateTo函数报错errMsg: “navigateTo:fail page “&#8230;“ is not found“</a></p>
                                        <p>下一个：<a href="/news/article-29966.htm">Spring的两种依赖注入方式:setter方法注入与构造方法注入</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-19349.htm" title="南京宠物领养中心官网（南京宠物领养中心官网招聘）">南京宠物领养中心官网（南京宠物领养中心官网招聘）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-3-hysteria-github.htm" title="「11月3日」最高速度19.6M/S，2024年Hysteria每天更新免费机场订阅节点链接">「11月3日」最高速度19.6M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-1-free-high-speed-nodes.htm" title="「12月1日」最高速度19.9M/S，2024年Hysteria每天更新免费机场订阅节点链接">「12月1日」最高速度19.9M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-28116.htm" title="自己给狗狗打的疫苗能办狗证吗?（自己给狗狗打的疫苗,疫苗本有用吗）">自己给狗狗打的疫苗能办狗证吗?（自己给狗狗打的疫苗,疫苗本有用吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-19-latest-hysteria-node.htm" title="「12月19日」最高速度21.7M/S，2024年Hysteria每天更新免费机场订阅节点链接">「12月19日」最高速度21.7M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-29-sing-hysteria-windows.htm" title="「11月29日」最高速度21M/S，2024年Hysteria每天更新免费机场订阅节点链接">「11月29日」最高速度21M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-26-free-high-speed-nodes.htm" title="「10月26日」最高速度19.9M/S，2024年Hysteria每天更新免费机场订阅节点链接">「10月26日」最高速度19.9M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-2-free-high-speed-nodes.htm" title="「12月2日」最高速度20.9M/S，2024年Hysteria每天更新免费机场订阅节点链接">「12月2日」最高速度20.9M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-26-sing-hysteria-windows.htm" title="「9月26日」最高速度21M/S，2024年Hysteria每天更新免费机场订阅节点链接">「9月26日」最高速度21M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-30-node-share.htm" title="「9月30日」最高速度19.9M/S，2024年Hysteria每天更新免费机场订阅节点链接">「9月30日」最高速度19.9M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">68</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!--================About Area End =================-->
        <!-- ================ start footer Area ================= -->
    <footer class="footer-area">
        <div class="container">
            <div class="footer-bottom row align-items-center text-center text-lg-left no-gutters">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p class="footer-text m-0 col-lg-8 col-md-12">
                    HysteriaWindows免费节点官网 版权所有 Powered by WordPress
                </p>
                <div class="col-lg-4 col-md-12 text-center text-lg-right footer-social">
                    <a href="#"><i class="ti-facebook"></i></a>
                    <a href="#"><i class="ti-twitter-alt"></i></a>
                    <a href="#"><i class="ti-dribbble"></i></a>
                    <a href="#"><i class="ti-linkedin"></i></a>
                </div>
            </div>
        </div>
    </footer>
    <!-- ================ End footer Area ================= -->
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="/assets/website/js/frontend/hysteriawindows/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/popper.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/owl-carousel/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/jquery.ajaxchimp.min.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/mail-script.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/contact.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/jquery.form.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/jquery.validate.min.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/mail-script.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/theme.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>