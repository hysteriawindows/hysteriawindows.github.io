<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://hysteriawindows.github.io/news/article-42591.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>synchronized有几种用法？</title>
        <meta name="description" content="在 Java 语言中，保证线程安全性的主要手段是加锁，而 Java 中的锁主要有两种：synchronized 和 Lock，我们今天重点来看一下 synchronized 的几种用法。 用法简介 使" />
        <link rel="icon" href="/assets/website/img/hysteriawindows/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="HysteriaWindows免费节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://hysteriawindows.github.io/news/article-42591.htm" />
    <meta property="og:site_name" content="HysteriaWindows免费节点官网" />
    <meta property="og:title" content="synchronized有几种用法？" />
    <meta property="og:image" content="https://hysteriawindows.github.io/uploads/20240814/0b5262547d522c3091ac6c80630214e1.webp" />
        <meta property="og:release_date" content="2025-01-18T07:15:29" />
    <meta property="og:updated_time" content="2025-01-18T07:15:29" />
        <meta property="og:description" content="在 Java 语言中，保证线程安全性的主要手段是加锁，而 Java 中的锁主要有两种：synchronized 和 Lock，我们今天重点来看一下 synchronized 的几种用法。 用法简介 使" />
        
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/assets/website/css/hysteriawindows/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/hysteriawindows/themify-icons.css">
    <link rel="stylesheet" href="/assets/website/js/frontend/hysteriawindows/fontawesome/css/all.min.css">
    <link rel="stylesheet" href="/assets/website/js/frontend/hysteriawindows/owl-carousel/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/js/frontend/hysteriawindows/animate-css/animate.css">
    <!-- main css -->
    <link rel="stylesheet" href="/assets/website/css/hysteriawindows/style.css">
    <link rel="stylesheet" href="/assets/website/css/hysteriawindows/responsive.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-W3GH5FWSVJ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-W3GH5FWSVJ');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--================Header Menu Area =================-->
    <header class="header_area">
        <div class="main_menu">
            <nav class="navbar navbar-expand-lg navbar-light">
                <div class="container">
                    <!-- Brand and toggle get grouped for better mobile display -->
                                        <a class="navbar-brand logo_h" href="/">
                        <span>Hysteria Windows</span>
                    </a>
                                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <!-- Collect the nav links, forms, and other content for toggling -->
                    <div class="collapse navbar-collapse offset" id="navbarSupportedContent">
                        <ul class="nav navbar-nav menu_nav ml-auto">
                                                        <li class="nav-item"><a class="nav-link" href="/">首页</a></li>
                                                        <li class="nav-item"><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                                        <li class="nav-item"><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                                        <li class="nav-item"><a class="nav-link" href="/news/">新闻资讯</a></li>
                                                        <li class="nav-item"><a class="nav-link" href="#">关于</a></li>
                            <li class="nav-item"><a class="nav-link" href="#">联系</a></li>
                        </ul>
                    </div>
                </div>
            </nav>
        </div>
    </header>
    <!--================Header Menu Area =================-->
    <!--================Hero Banner Area Start =================-->
    <section class="hero-banner d-flex align-items-center">
        <div class="container text-center">
            <h1>synchronized有几种用法？</h1>
            <nav aria-label="breadcrumb" class="banner-breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">首页</a></li>
                    <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                    <li class="breadcrumb-item active" aria-current="page">正文</li>
                </ol>
            </nav>
        </div>
    </section>
    <!--================Hero Banner Area End =================-->
    <!--================About  Area =================-->
    <section class="statics-area area-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>在 Java 语言中，保证线程安全性的主要手段是加锁，而 Java 中的锁主要有两种：synchronized 和 Lock，我们今天重点来看一下 synchronized 的几种用法。</p> <h2 id="用法简介">用法简介</h2> <p>使用 synchronized 无需手动执行加锁和释放锁的操作，我们只需要声明 synchronized 关键字就可以了，JVM 层面会帮我们自动的进行加锁和释放锁的操作。<br /> synchronized 可用于修饰<strong>普通方法、静态方法和代码块</strong>，接下来我们分别来看。</p> <h2 id="1修饰普通方法">1、修饰普通方法</h2> <p>synchronized 修饰普通方法的用法如下：</p> <pre><code class="language-java">/**  * synchronized 修饰普通方法  */ public synchronized void method() {     // .... }</code></pre> <p>当 synchronized 修饰普通方法时，被修饰的方法被称为同步方法，其作用范围是整个方法，作用的对象是调用这个方法的对象。</p> <h2 id="2修饰静态方法">2、修饰静态方法</h2> <p>synchronized 修饰静态方法和修饰普通方法类似，它的用法如下：</p> <pre><code class="language-java">/**  * synchronized 修饰静态方法  */ public static synchronized void staticMethod() {     // ....... }</code></pre> <p>当 synchronized 修饰静态方法时，其作用范围是整个程序，这个锁对于所有调用这个锁的对象都是互斥的。</p> <blockquote> <p>所谓的互斥，指的是同一时间只能有一个线程能使用，其他线程只能排队等待。</p> </blockquote> <h3 id="修饰普通方法-vs-修饰静态方法">修饰普通方法 VS 修饰静态方法</h3> <p>synchronized 修饰普通方法和静态方法看似相同，但二者完全不同，<strong>对于静态方法来说 synchronized 加锁是全局的，也就是整个程序运行期间，所有调用这个静态方法的对象都是互斥的，而普通方法是针对对象级别的，不同的对象对应着不同的锁</strong>，比如以下代码，同样是调用两次方法，但锁的获取完全不同，实现代码如下：</p> <pre><code class="language-java">import java.time.LocalDateTime; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit;  public class SynchronizedUsage {     public static void main(String[] args) throws InterruptedException {         // 创建线程池同时执行任务         ExecutorService threadPool = Executors.newFixedThreadPool(10);          // 执行两次静态方法         threadPool.execute(() -&gt; {             staticMethod();         });         threadPool.execute(() -&gt; {             staticMethod();         });                  // 执行两次普通方法         threadPool.execute(() -&gt; {             SynchronizedUsage usage = new SynchronizedUsage();             usage.method();         });         threadPool.execute(() -&gt; {             SynchronizedUsage usage2 = new SynchronizedUsage();             usage2.method();         });     }      /**      * synchronized 修饰普通方法      * 本方法的执行需要 3s（因为有 3s 的休眠时间）      */     public synchronized void method() {         System.out.println("普通方法执行时间：" + LocalDateTime.now());         try {             // 休眠 3s             TimeUnit.SECONDS.sleep(3);         } catch (InterruptedException e) {             e.printStackTrace();         }     }      /**      * synchronized 修饰静态方法      * 本方法的执行需要 3s（因为有 3s 的休眠时间）      */     public static synchronized void staticMethod() {         System.out.println("静态方法执行时间：" + LocalDateTime.now());         try {             // 休眠 3s             TimeUnit.SECONDS.sleep(3);         } catch (InterruptedException e) {             e.printStackTrace();         }     } }</code></pre> <p>以上程序的执行结果如下：<br /><img decoding="async" src="https://cdn.nlark.com/yuque/0/2022/png/92791/1643426201331-a9d1c594-1ad6-4366-8384-28ff1ffaed01.png#clientId=u641792d8-6acd-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=239&amp;id=ub22028cf&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=478&amp;originWidth=2001&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=96015&amp;status=done&amp;style=none&amp;taskId=u0be2eabc-b115-4203-9b64-95f9479ae39&amp;title=&amp;width=1000.5" alt="image.png"><br /> 从上述结果可以看出，<strong>静态方法加锁是全局的，针对的是所有调用者；而普通方法加锁是对象级别的，不同的对象拥有的锁也不同。</strong></p> <h2 id="3修饰代码块">3、修饰代码块</h2> <p>我们在日常开发中，最常用的是给代码块加锁，而不是给方法加锁，因为给方法加锁，相当于给整个方法全部加锁，这样的话锁的粒度就太大了，程序的执行性能就会受到影响，所以通常情况下，我们会使用 synchronized 给代码块加锁，它的实现语法如下：</p> <pre><code class="language-java">public void classMethod() throws InterruptedException {     // 前置代码...          // 加锁代码     synchronized (SynchronizedUsage.class) {         // ......     }          // 后置代码... }</code></pre> <p>从上述代码我们可以看出，相比于修饰方法，修饰代码块需要自己手动指定加锁对象，加锁的对象通常使用 this 或 xxx.class 这样的形式来表示，比如以下代码：</p> <pre><code class="language-java">// 加锁某个类 synchronized (SynchronizedUsage.class) {     // ...... }  // 加锁当前类对象 synchronized (this) {     // ...... }</code></pre> <h3 id="this-vs-class">this VS class</h3> <p>使用 synchronized 加锁 this 和 xxx.class 是完全不同的，当加锁 this 时，表示用当前的对象进行加锁，每个对象都对应了一把锁；而当使用 xxx.class 加锁时，表示使用某个类（而非类实例）来加锁，它是应用程序级别的，是全局生效的，如以下代码所示：</p> <pre><code class="language-java">import java.time.LocalDateTime; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit;  public class SynchronizedUsageBlock {     public static void main(String[] args) throws InterruptedException {         // 创建线程池同时执行任务         ExecutorService threadPool = Executors.newFixedThreadPool(10);          // 执行两次 synchronized(this)         threadPool.execute(() -&gt; {             SynchronizedUsageBlock usage = new SynchronizedUsageBlock();             usage.thisMethod();         });         threadPool.execute(() -&gt; {             SynchronizedUsageBlock usage2 = new SynchronizedUsageBlock();             usage2.thisMethod();         });          // 执行两次 synchronized(xxx.class)         threadPool.execute(() -&gt; {             SynchronizedUsageBlock usage3 = new SynchronizedUsageBlock();             usage3.classMethod();         });         threadPool.execute(() -&gt; {             SynchronizedUsageBlock usage4 = new SynchronizedUsageBlock();             usage4.classMethod();         });     }      /**      * synchronized(this) 加锁      * 本方法的执行需要 3s（因为有 3s 的休眠时间）      */     public void thisMethod() {         synchronized (this) {             System.out.println("synchronized(this) 加锁：" + LocalDateTime.now());             try {                 // 休眠 3s                 TimeUnit.SECONDS.sleep(3);             } catch (InterruptedException e) {                 e.printStackTrace();             }         }     }      /**      * synchronized(xxx.class) 加锁      * 本方法的执行需要 3s（因为有 3s 的休眠时间）      */     public void classMethod() {         synchronized (SynchronizedUsageBlock.class) {             System.out.println("synchronized(xxx.class) 加锁：" + LocalDateTime.now());             try {                 // 休眠 3s                 TimeUnit.SECONDS.sleep(3);             } catch (InterruptedException e) {                 e.printStackTrace();             }         }     } }</code></pre> <p>以上程序的执行结果如下：<br /><img decoding="async" src="https://cdn.nlark.com/yuque/0/2022/png/92791/1643427854702-67117bd9-8c40-4e68-9bce-7e1681f5f6f1.png#clientId=u641792d8-6acd-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=256&amp;id=u8c79dcac&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=511&amp;originWidth=1880&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=120107&amp;status=done&amp;style=none&amp;taskId=ua8131b2f-d24b-440c-95f1-f1170d8c5fb&amp;title=&amp;width=940" alt="image.png"></p> <h2 id="总结">总结</h2> <p>synchronized 用 3 种用法，用它可以来修饰普通方法、静态方法和代码块，其中最常用的是修饰代码块，而修饰代码块时需要指定一个加锁对象，这个加锁对象通常使用 this 或 xxx.class 来表示，当使用 this 时，表示使用当前对象来加锁，而使用 class 时，表示表示使用某个类（非类对象实例）来加锁，它是全局生效的。</p> <blockquote></blockquote> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-42107.htm">动物疫苗空瓶回收处理制度（疫苗空瓶回收登记表怎么填写）</a></p>
                                        <p>下一个：<a href="/news/article-42592.htm">沈阳宠物猫交易微信群有哪些（沈阳宠物猫交易网站）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-40125.htm" title="狗粮制作加工厂家（狗粮制作加工厂家电话）">狗粮制作加工厂家（狗粮制作加工厂家电话）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-17-hysteria-node-share.htm" title="「10月17日」最高速度22.9M/S，2024年Hysteria每天更新免费机场订阅节点链接">「10月17日」最高速度22.9M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-19-latest-hysteria-node.htm" title="「12月19日」最高速度21.7M/S，2024年Hysteria每天更新免费机场订阅节点链接">「12月19日」最高速度21.7M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-36670.htm" title="成都市宠物领养平台的电话号码是多少（成都市宠物领养平台的电话号码是多少号）">成都市宠物领养平台的电话号码是多少（成都市宠物领养平台的电话号码是多少号）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-21-hysteria-github.htm" title="「10月21日」最高速度20.8M/S，2024年Hysteria每天更新免费机场订阅节点链接">「10月21日」最高速度20.8M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-11-hysteria-github.htm" title="「12月11日」最高速度20.3M/S，2024年Hysteria每天更新免费机场订阅节点链接">「12月11日」最高速度20.3M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-28-free-node-subscribe-links.htm" title="「10月28日」最高速度19.6M/S，2024年Hysteria每天更新免费机场订阅节点链接">「10月28日」最高速度19.6M/S，2024年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-38626.htm" title="netty依赖精简">netty依赖精简</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-13-node-share.htm" title="「1月13日」最高速度22.2M/S，2025年Hysteria每天更新免费机场订阅节点链接">「1月13日」最高速度22.2M/S，2025年Hysteria每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-37745.htm" title="深圳市宠物领养中领养猫咪要钱吗（宠物领养 深圳）">深圳市宠物领养中领养猫咪要钱吗（宠物领养 深圳）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!--================About Area End =================-->
        <!-- ================ start footer Area ================= -->
    <footer class="footer-area">
        <div class="container">
            <div class="footer-bottom row align-items-center text-center text-lg-left no-gutters">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p class="footer-text m-0 col-lg-8 col-md-12">
                    HysteriaWindows免费节点官网 版权所有 Powered by WordPress
                </p>
                <div class="col-lg-4 col-md-12 text-center text-lg-right footer-social">
                    <a href="#"><i class="ti-facebook"></i></a>
                    <a href="#"><i class="ti-twitter-alt"></i></a>
                    <a href="#"><i class="ti-dribbble"></i></a>
                    <a href="#"><i class="ti-linkedin"></i></a>
                </div>
            </div>
        </div>
    </footer>
    <!-- ================ End footer Area ================= -->
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="/assets/website/js/frontend/hysteriawindows/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/popper.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/owl-carousel/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/jquery.ajaxchimp.min.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/mail-script.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/contact.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/jquery.form.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/jquery.validate.min.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/mail-script.js"></script>
    <script src="/assets/website/js/frontend/hysteriawindows/theme.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>